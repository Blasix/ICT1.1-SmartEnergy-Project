@page "/gasgebruik"
@attribute [StreamRendering]
@inject IMeasurementRepository measurementRepository;
@inject NavigationManager NavigationManager;
@rendermode InteractiveServer

<style>
    .component-grid {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
    }

    .component {
        padding: 10px;
        border-style: solid;
        border-color: #CCCCCC;
        border-radius: 10px;
    }

    .slider {
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 100%;
    }
</style>


<PageTitle>Gas Gebruik</PageTitle>

<h1>Gas Gebruik</h1>
<p>
    Op deze pagina kan je een goed overzicht krijgen van het gasbruik. Zowel de meter als de periode kunnen worden
    aangepast. In de tabel kan je per dag de graaddag
    (tempratuur verschil tussen binnen (18) en buiten) en het gasbebruik zien. Met deze pagina kan je dus
    goed inzien hoeveel gas een huis gebruikt op basis van de tempratuur.
</p>
<div class="component-grid">
    <div class="component" style="flex: 1 0 80%;">
        <div class="slider" style="position: relative;">
            <label for="numberOfDays" class="form-label">Hoeveel dagen terug kijken?</label>
            <input type="range" class="form-range" min="1" max="30" id="numberOfDays" value="@numberOfDays"
                @onchange="OnNumberOfDaysChanged">
            <h2 style="position:absolute; right: 0;">@numberOfDays</h2>
        </div>
    </div>
    <div class="component">
        <label for="meterId" class="form-label">Meter ID (Hexadecimal)</label>
        <input type="text" class="form-control" id="meterId" value="@meterIdHex" @onchange="OnMeterIDChanged">
    </div>
</div>



@if (measurements == null)
{
    <p><em>Data wordt geladen...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Datum</th>
            <th>Graaddag</th>
            <th>Gas Verbruik</th>
            <th>Unit</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var measurement in measurements)
            {
                <tr>
                    <td>@measurement.Timestamp.AddMicroseconds(-1).ToString("dd-MM-yyyy")</td>
                    <td>@(graadDag(measurement.Temperature) < 0 ? "N.V.T." : graadDag(measurement.Temperature))</td>
                    <td>@measurement.Value</td>
                    <td>@measurement.Unit</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Measurement>? measurements;
    private int numberOfDays { get; set; } = 7;
    private decimal graadDag(double? temp)
    {
        return Math.Round((decimal)(18 - (temp ?? 0)), 2);
    }
    string meterIdHex { get; set; } = "107550";

    protected override async Task OnInitializedAsync()
    {
        // Verkrijg de data in de url
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Krijg de hoeveelheid dagen uit de url
        if (int.TryParse(queryParams["days"], out var days))
        {
            numberOfDays = days;
        }
        // Krijg het meterid uit de url
        if (queryParams["meterId"] != null)
        {
            meterIdHex = queryParams["meterId"];
        }
        // Zet het meter id van hexadecimaal om naar decimaal
        int meterId = Convert.ToInt32(meterIdHex, 16);

        // verkrijg de measurements
        measurements = await this.measurementRepository.GetGasDelivered(meterId, numberOfDays, "1d");
    }

    // functie die de url update voor de dagen
    private void OnNumberOfDaysChanged(ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out var days))
        {
            numberOfDays = days;
            UpdateUrl();
        }
    }

    // functie die de url update voor de meter id
    private void OnMeterIDChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            meterIdHex = e.Value.ToString();
            UpdateUrl();
        }
    }

    // functie die zorgt dat de data op de goede plek staat in de url en het niks overwrite
    private void UpdateUrl()
    {
        var uri = new Uri(NavigationManager.Uri).GetLeftPart(UriPartial.Path) +
        $"?days={numberOfDays}&meterId={meterIdHex}";
        NavigationManager.NavigateTo(uri, forceLoad: true);
    }
}